# reversing in rows, as plotting in y in the reverse of the matrix row index
matrix <- matrix[rev(sort_idx), sort_idx]
# melt fuction use row/column keys for creating the data frame
rownames(matrix) <- 1:nrows
colnames(matrix) <- 1:nrows
# adjacency matrix a table (input for heatmap)
df <- melt(matrix)
colnames(df) <- c("prey", "predator", "sampling probability")
df$tao <- tao
return(df)
}
taos      <- simulation_tao_s
taos      <- sapply(seq(1,6), function(x) 0.000000000001*100^x)
link_attr <- "biomass.flow"
# sort indexing for the adjacency matrix
idx_kmeans    <- sort(vertex_attr(aggregated_kmeans_G, 'M'), index.return=TRUE)$ix
idx_jaccard   <- sort(vertex_attr(aggregated_kmeans_G, 'M'), index.return=TRUE)$ix
idx_madingley <- sort(vertex_attr(madingley_object_matrix@G, 'M'), index.return=TRUE)$ix
# extracting the probabilities
dt_kmeans_matrix  <- rbindlist(lapply(taos, get_adjacency_probabilities, aggregated_kmeans_G, link_attr, idx_kmeans))
dt_jaccard_matrix <- rbindlist(lapply(taos, get_adjacency_probabilities, aggregated_kmeans_G, link_attr, idx_kmeans))
# One analysis without aggregation
dt_madingley_matrix <- rbindlist(lapply(taos, get_adjacency_probabilities, madingley_object_matrix@G, link_attr, idx_madingley))
#dt_madingley <- rbindlist(lapply(taos, get_expected_degree_distribution,  madingley_full_objects[[1]]@G, simulation_attr_weight))
#dt_kmeans$agg_method  <- 'Mass A/J K-means'
#dt_jaccard$agg_method <- 'Jaccard Trophic Similarity'
#dt_aggregation = rbind(dt_kmeans, dt_jaccard)
dt_madingley_matrix
theme_matrix <-
theme(aspect.ratio=1) +
theme(panel.background = element_blank()) +
theme(axis.text.x = element_blank(),axis.text.y = element_blank(),axis.ticks = element_blank()) +
#theme(legend.title=element_blank()) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
theme(legend.position="top")
g<-ggplot(dt_madingley_matrix, aes(predator,prey, fill=`sampling probability`)) +
scale_fill_gradient2() + #low='white',high='black')
geom_raster() +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_matrix
print(g)
Inf
taos
c(taos,3)
taos      <- simulation_tao_s
taos      <- sapply(seq(1,5), function(x) 0.000000000001*100^x)
taos      <- c(taos, Inf)
link_attr <- "biomass.flow"
# sort indexing for the adjacency matrix
idx_kmeans    <- sort(vertex_attr(aggregated_kmeans_G, 'M'), index.return=TRUE)$ix
idx_jaccard   <- sort(vertex_attr(aggregated_kmeans_G, 'M'), index.return=TRUE)$ix
idx_madingley <- sort(vertex_attr(madingley_object_matrix@G, 'M'), index.return=TRUE)$ix
# extracting the probabilities
dt_kmeans_matrix  <- rbindlist(lapply(taos, get_adjacency_probabilities, aggregated_kmeans_G, link_attr, idx_kmeans))
dt_jaccard_matrix <- rbindlist(lapply(taos, get_adjacency_probabilities, aggregated_kmeans_G, link_attr, idx_kmeans))
# One analysis without aggregation
dt_madingley_matrix <- rbindlist(lapply(taos, get_adjacency_probabilities, madingley_object_matrix@G, link_attr, idx_madingley))
#dt_madingley <- rbindlist(lapply(taos, get_expected_degree_distribution,  madingley_full_objects[[1]]@G, simulation_attr_weight))
#dt_kmeans$agg_method  <- 'Mass A/J K-means'
#dt_jaccard$agg_method <- 'Jaccard Trophic Similarity'
#dt_aggregation = rbind(dt_kmeans, dt_jaccard)
theme_matrix <-
theme(aspect.ratio=1) +
theme(panel.background = element_blank()) +
theme(axis.text.x = element_blank(),axis.text.y = element_blank(),axis.ticks = element_blank()) +
#theme(legend.title=element_blank()) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
theme(legend.position="top")
g<-ggplot(dt_madingley_matrix, aes(predator,prey, fill=`sampling probability`)) +
scale_fill_gradient2() + #low='white',high='black')
geom_raster() +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_matrix
print(g)
taos      <- simulation_tao_s
taos      <- sapply(seq(1,6), function(x) 0.000000000001*100^x)
link_attr <- "biomass.flow"
# sort indexing for the adjacency matrix
idx_kmeans    <- sort(vertex_attr(aggregated_kmeans_G, 'M'), index.return=TRUE)$ix
idx_jaccard   <- sort(vertex_attr(aggregated_kmeans_G, 'M'), index.return=TRUE)$ix
idx_madingley <- sort(vertex_attr(madingley_object_matrix@G, 'M'), index.return=TRUE)$ix
# extracting the probabilities
dt_kmeans_matrix  <- rbindlist(lapply(taos, get_adjacency_probabilities, aggregated_kmeans_G, link_attr, idx_kmeans))
dt_jaccard_matrix <- rbindlist(lapply(taos, get_adjacency_probabilities, aggregated_kmeans_G, link_attr, idx_kmeans))
# One analysis without aggregation
dt_madingley_matrix <- rbindlist(lapply(taos, get_adjacency_probabilities, madingley_object_matrix@G, link_attr, idx_madingley))
#dt_madingley <- rbindlist(lapply(taos, get_expected_degree_distribution,  madingley_full_objects[[1]]@G, simulation_attr_weight))
#dt_kmeans$agg_method  <- 'Mass A/J K-means'
#dt_jaccard$agg_method <- 'Jaccard Trophic Similarity'
#dt_aggregation = rbind(dt_kmeans, dt_jaccard)
theme_matrix <-
theme(aspect.ratio=1) +
theme(panel.background = element_blank()) +
theme(axis.text.x = element_blank(),axis.text.y = element_blank(),axis.ticks = element_blank()) +
#theme(legend.title=element_blank()) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
theme(legend.position="top")
g<-ggplot(dt_madingley_matrix, aes(predator,prey, fill=`sampling probability`)) +
scale_fill_gradient2() + #low='white',high='black')
geom_raster() +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_matrix
print(g)
S <- simulation_S_matrix
S <- 80
# First snapshot corresponds to the one that will be used for adjacency matrix visualization
madingley_object_matrix <- madingley_full_objects[[2]]
aggregated_kmeans       <- cohort.aggregation(madingley_object_matrix, S, node.kmeans.aggregation)
aggregated_jaccard      <- cohort.aggregation(madingley_object_matrix, S, node.jaccard.aggregation)
aggregated_kmeans_G     <- aggregated_kmeans@G
aggregated_jaccard_G    <- aggregated_jaccard@G
get_adjacency_probabilities <- function(tao, G, link_attr, sort_idx){
matrix <- as.matrix(sampling.poisson.effort.prob_matrix(tao,G,link_attr))
nrows  <- nrow(matrix)
# reversing in rows, as plotting in y in the reverse of the matrix row index
matrix <- matrix[rev(sort_idx), sort_idx]
# melt fuction use row/column keys for creating the data frame
rownames(matrix) <- 1:nrows
colnames(matrix) <- 1:nrows
# adjacency matrix a table (input for heatmap)
df <- melt(matrix)
colnames(df) <- c("prey", "predator", "sampling probability")
df$tao <- tao
return(df)
}
taos      <- simulation_tao_s
taos      <- sapply(seq(1,6), function(x) 0.000000000001*100^x)
link_attr <- "biomass.flow"
# sort indexing for the adjacency matrix
idx_kmeans    <- sort(vertex_attr(aggregated_kmeans_G, 'M'), index.return=TRUE)$ix
idx_jaccard   <- sort(vertex_attr(aggregated_jaccard, 'M'), index.return=TRUE)$ix
taos      <- simulation_tao_s
taos      <- sapply(seq(1,6), function(x) 0.000000000001*100^x)
link_attr <- "biomass.flow"
# sort indexing for the adjacency matrix
idx_kmeans    <- sort(vertex_attr(aggregated_kmeans_G, 'M'), index.return=TRUE)$ix
idx_jaccard   <- sort(vertex_attr(aggregated_jaccard_G, 'M'), index.return=TRUE)$ix
idx_madingley <- sort(vertex_attr(madingley_object_matrix@G, 'M'), index.return=TRUE)$ix
# extracting the probabilities
dt_kmeans_matrix  <- rbindlist(lapply(taos, get_adjacency_probabilities, aggregated_kmeans_G, link_attr, idx_kmeans))
dt_jaccard_matrix <- rbindlist(lapply(taos, get_adjacency_probabilities, aggregated_jaccard_G, link_attr, idx_jaccard))
# One analysis without aggregation
dt_madingley_matrix <- rbindlist(lapply(taos, get_adjacency_probabilities, madingley_object_matrix@G, link_attr, idx_madingley))
theme_matrix <-
theme(aspect.ratio=1) +
theme(panel.background = element_blank()) +
theme(axis.text.x = element_blank(),axis.text.y = element_blank(),axis.ticks = element_blank()) +
#theme(legend.title=element_blank()) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
theme(legend.position="top")
g<-ggplot(dt_madingley_matrix, aes(predator,prey, fill=`sampling probability`)) +
scale_fill_gradient2() + #low='white',high='black')
geom_raster() +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_matrix
print(g)
g<-ggplot(dt_kmeans_matrix, aes(predator,prey, fill=`sampling probability`)) +
scale_fill_gradient2() + #low='white',high='black')
geom_raster() +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_matrix
print(g)
g<-ggplot(dt_jaccard_matrix, aes(predator,prey, fill=`sampling probability`)) +
scale_fill_gradient2() + #low='white',high='black')
geom_raster() +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_matrix
print(g)
g<-ggplot(dt_jaccard_matrix, aes(predator,prey, fill=`sampling probability`)) +
scale_fill_gradient2() + #low='white',high='black')
geom_raster() +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_matrix
print(g)
q <- qplot(data=dt_aggregation, x=degree, y=cdf, log='y', size=I(2),
shape=agg_method, group = agg_method, color = agg_method) +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_bw() +
theme(legend.title=element_blank()) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
theme(legend.position="top")
q
rm(list = ls())
# Link attribute to be used as the weight in the network to perform the poisson sampling
simulation_attr_weight = "biomass.flow"
# Parameters for the degree distributions
simulation_S_degree             <- 200  # Number of aggregated cohorts
simulation_time_snapshot_degree <- 1223 # Time snapshot for degree distribution
simulation_tao_vals_degree      <- sapply(seq(1,9), function(x) 0.0000000001*10^x) # poisson parameter
# Parameters for the matrix visualizations
simulation_S_matrix             <- 60   # Number of aggregated cohorts
simulation_time_snapshot_matrix <- 1200 # Time snapshot
simulation_tao_vals_matrix      <- sapply(seq(1,6), function(x) 0.000000000001*100^x) # poisson parameter
unlink('sampling_effort_cache', recursive = TRUE)
q <- qplot(data=dt_aggregation, x=degree, y=cdf, log='y', size=I(2),
shape=agg_method, group = agg_method, color = agg_method) +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_bw() +
theme(legend.title=element_blank()) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
theme(legend.position="top")
# Loading packages
library(igraph) # R famous graph library
library(data.table) # A really fast data frame
library(ggplot2) # Nice plots in R
library(plotly)
library(gridExtra) # To plot in a Grid
library(cheddar) # R foodweb library
library(fwga) # for instructions about how to install this library see https://github.com/jdyen/fwga
library(tnet)
library(sna)
library(parallel)
# Loading Mandingley reading functions
source('../main_code/network_reading.R')
source('../main_code/network_aggregation.R')
source('../main_code/network_sampling.R')
source('../main_code/network_functions.R')
source('../main_code/misc.R')
# Link attribute to be used as the weight in the network to perform the poisson sampling
simulation_attr_weight = "biomass.flow"
# Parameters for the degree distributions
simulation_S_degree             <- 200  # Number of aggregated cohorts
simulation_time_snapshot_degree <- 1223 # Time snapshot for degree distribution
simulation_tao_vals_degree      <- sapply(seq(1,9), function(x) 0.0000000001*10^x) # poisson parameter
# Parameters for the matrix visualizations
simulation_S_matrix             <- 60   # Number of aggregated cohorts
simulation_time_snapshot_matrix <- 1200 # Time snapshot
simulation_tao_vals_matrix      <- sapply(seq(1,6), function(x) 0.000000000001*100^x) # poisson parameter
node_file <- '../../data/madingley_data/original_nodes.txt'
edge_file <- '../../data/madingley_data/original_edges.txt'
# For this analysis, let's just focus in two snapshots
snapshot_times <- c(simulation_time_snapshot_degree,simulation_time_snapshot_matrix)
# Getting two madingley objects, one for each snapshot
madingley_full_objects <- lapply(snapshot_times,  read.madingley.data, file_nodes=node_file, file_edges=edge_file, include_source_node = FALSE)
S <- simulation_S_degree
# First snapshot corresponds to the one that will be used for degree distribution analysis
madingley_object <- madingley_full_objects[[1]]
kmeans_agg_graph_degree  <- cohort.aggregation(madingley_object, S, node.kmeans.aggregation)@G
jaccard_agg_graph_degree <- cohort.aggregation(madingley_object, S, node.jaccard.aggregation)@G
get_expected_degree_distribution <- function(tao, G, link_attr){
probability_matrix <- sampling.poisson.effort.prob_matrix(tao, G, link_attr)
expected_degrees   <- round(apply(probability_matrix, 1, sum) + apply(probability_matrix, 2, sum))
dt <- data.table(degree = expected_degrees)
dt <- dt[,.N,by=degree]
dt <- dt[order(-degree),]
dt$tao <- tao
return(data.table(degree=dt$degree, cdf=cumsum(dt$N)/sum(dt$N), tao=factor(tao)))
}
taos <- simulation_S_degree
#taos = sapply(seq(1,9), function(x) 0.0000000001*10^x)
# extracting the probabilities
dt_kmeans  <- rbindlist(lapply(taos, get_expected_degree_distribution, kmeans_agg_graph_degree, simulation_attr_weight))
dt_jaccard <- rbindlist(lapply(taos, get_expected_degree_distribution, jaccard_agg_graph_degree, simulation_attr_weight))
# One analysis without aggregation
dt_madingley <- rbindlist(lapply(taos, get_expected_degree_distribution,  madingley_full_objects[[1]]@G, simulation_attr_weight))
dt_kmeans$agg_method  <- 'Mass A/J K-means'
dt_jaccard$agg_method <- 'Jaccard Trophic Similarity'
dt_aggregation = rbind(dt_kmeans, dt_jaccard)
q <-qplot(data=dt_madingley, x=degree, y=cdf, log='y', size=I(2)) +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
#stat_smooth(method='auto') +
theme_bw()
pdf("sampling_degree_full_madingley.pdf", width = 8, height = 8) # Open a new pdf file
q <-qplot(data=dt_madingley, x=degree, y=cdf, log='y', size=I(2)) +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
#stat_smooth(method='auto') +
theme_bw()
pdf("sampling_degree_full_madingley.pdf", width = 8, height = 8) # Open a new pdf file
q
dev.off()
q
q
q <-qplot(data=dt_madingley, x=degree, y=cdf, log='y', size=I(2)) +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
#stat_smooth(method='auto') +
theme_bw()
q
pdf("sampling_degree_full_madingley.pdf", width = 8, height = 8) # Open a new pdf file
q
dev.off()
q
q <-qplot(data=dt_madingley, x=degree, y=cdf, log='y', size=I(2)) +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
#stat_smooth(method='auto') +
theme_bw()
#q
pdf("sampling_degree_full_madingley.pdf", width = 8, height = 8) # Open a new pdf file
q
dev.off()
q <-qplot(data=dt_madingley, x=degree, y=cdf, log='y', size=I(2)) +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
#stat_smooth(method='auto') +
theme_bw()
#q
#pdf("sampling_degree_full_madingley.pdf", width = 8, height = 8) # Open a new pdf file
#q
#dev.off()
q
taos <- simulation_tao_vals_degree
#taos = sapply(seq(1,9), function(x) 0.0000000001*10^x)
# extracting the probabilities
dt_kmeans  <- rbindlist(lapply(taos, get_expected_degree_distribution, kmeans_agg_graph_degree, simulation_attr_weight))
dt_jaccard <- rbindlist(lapply(taos, get_expected_degree_distribution, jaccard_agg_graph_degree, simulation_attr_weight))
# One analysis without aggregation
dt_madingley <- rbindlist(lapply(taos, get_expected_degree_distribution,  madingley_full_objects[[1]]@G, simulation_attr_weight))
dt_kmeans$agg_method  <- 'Mass A/J K-means'
dt_jaccard$agg_method <- 'Jaccard Trophic Similarity'
dt_aggregation = rbind(dt_kmeans, dt_jaccard)
q <-qplot(data=dt_madingley, x=degree, y=cdf, log='y', size=I(2)) +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
#stat_smooth(method='auto') +
theme_bw()
#q
#pdf("sampling_degree_full_madingley.pdf", width = 8, height = 8) # Open a new pdf file
#q
#dev.off()
q
q <-qplot(data=dt_madingley, x=degree, y=cdf, log='y', size=I(2)) +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
#stat_smooth(method='auto') +
theme_bw()
pdf("sampling_degree_full_madingley.pdf", width = 8, height = 8) # Open a new pdf file
q <-qplot(data=dt_madingley, x=degree, y=cdf, log='y', size=I(2)) +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
#stat_smooth(method='auto') +
theme_bw()
pdf("sampling_degree_full_madingley.pdf", width = 8, height = 8) # Open a new pdf file
q
dev.off()
q
q <- qplot(data=dt_aggregation, x=degree, y=cdf, log='y', size=I(2),
shape=agg_method, group = agg_method, color = agg_method) +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_bw() +
theme(legend.title=element_blank()) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
theme(legend.position="top")
pdf("sampling_degree_aggregation.pdf", width = 8, height = 8) # Open a new pdf file
q
dev.off()
q
S <- simulation_S_matrix
#S <- 80
# First snapshot corresponds to the one that will be used for adjacency matrix visualization
madingley_object_matrix <- madingley_full_objects[[2]]
aggregated_kmeans       <- cohort.aggregation(madingley_object_matrix, S, node.kmeans.aggregation)
aggregated_jaccard      <- cohort.aggregation(madingley_object_matrix, S, node.jaccard.aggregation)
aggregated_kmeans_G     <- aggregated_kmeans@G
aggregated_jaccard_G    <- aggregated_jaccard@G
get_adjacency_probabilities <- function(tao, G, link_attr, sort_idx){
matrix <- as.matrix(sampling.poisson.effort.prob_matrix(tao,G,link_attr))
nrows  <- nrow(matrix)
# reversing in rows, as plotting in y in the reverse of the matrix row index
matrix <- matrix[rev(sort_idx), sort_idx]
# melt fuction use row/column keys for creating the data frame
rownames(matrix) <- 1:nrows
colnames(matrix) <- 1:nrows
# adjacency matrix a table (input for heatmap)
df <- melt(matrix)
colnames(df) <- c("prey", "predator", "sampling probability")
df$tao <- tao
return(df)
}
taos      <- simulation_tao_vals_matrix
#taos      <- sapply(seq(1,6), function(x) 0.000000000001*100^x)
link_attr <- simulation_attr_weight
# sort indexing for the adjacency matrix
idx_kmeans    <- sort(vertex_attr(aggregated_kmeans_G, 'M'), index.return=TRUE)$ix
idx_jaccard   <- sort(vertex_attr(aggregated_jaccard_G, 'M'), index.return=TRUE)$ix
idx_madingley <- sort(vertex_attr(madingley_object_matrix@G, 'M'), index.return=TRUE)$ix
# extracting the probabilities
dt_kmeans_matrix  <- rbindlist(lapply(taos, get_adjacency_probabilities, aggregated_kmeans_G, link_attr, idx_kmeans))
dt_jaccard_matrix <- rbindlist(lapply(taos, get_adjacency_probabilities, aggregated_jaccard_G, link_attr, idx_jaccard))
# One analysis without aggregation
dt_madingley_matrix <- rbindlist(lapply(taos, get_adjacency_probabilities, madingley_object_matrix@G, link_attr, idx_madingley))
theme_matrix <-
theme(aspect.ratio=1) +
theme(panel.background = element_blank()) +
theme(axis.text.x = element_blank(),axis.text.y = element_blank(),axis.ticks = element_blank()) +
#theme(legend.title=element_blank()) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
theme(legend.position="top")
g<-ggplot(dt_madingley_matrix, aes(predator,prey, fill=`sampling probability`)) +
scale_fill_gradient2() + #low='white',high='black')
geom_raster() +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_matrix
pdf("sampling_matrix_full_madingley.pdf", width = 8, height = 8) # Open a new pdf file
g
dev.off()
print(g)
g<-ggplot(dt_kmeans_matrix, aes(predator,prey, fill=`sampling probability`)) +
scale_fill_gradient2() + #low='white',high='black')
geom_raster() +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_matrix
pdf("sampling_matrix_kmeans.pdf", width = 8, height = 8) # Open a new pdf file
q
dev.off()
print(g)
g<-ggplot(dt_kmeans_matrix, aes(predator,prey, fill=`sampling probability`)) +
scale_fill_gradient2() + #low='white',high='black')
geom_raster() +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_matrix
pdf("sampling_matrix_kmeans.pdf", width = 8, height = 8) # Open a new pdf file
g
dev.off()
print(g)
g<-ggplot(dt_jaccard_matrix, aes(predator,prey, fill=`sampling probability`)) +
scale_fill_gradient2() + #low='white',high='black')
geom_raster() +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_matrix
pdf("sampling_matrix_jaccard.pdf", width = 8, height = 8) # Open a new pdf file
q
dev.off()
print(g)
g<-ggplot(dt_jaccard_matrix, aes(predator,prey, fill=`sampling probability`)) +
scale_fill_gradient2() + #low='white',high='black')
geom_raster() +
facet_wrap(~tao, scales = "free",  labeller = label_both) +
theme_matrix
pdf("sampling_matrix_jaccard.pdf", width = 8, height = 8) # Open a new pdf file
g
dev.off()
print(g)
unlink('sampling_effort_cache', recursive = TRUE)
unlink('sampling_effort_cache', recursive = TRUE)
# Loading packages
library(igraph) # R famous graph library
library(data.table) # A really fast data frame
library(ggplot2) # Nice plots in R
library(gridExtra)
library(NetIndices)
library(parallel)
library(latex2exp)
# Loading Mandingley reading functions
source('../main_code/network_reading.R')
source('../main_code/network_aggregation.R')
source('../main_code/network_sampling.R')
source('../main_code/network_functions.R')
source('../main_code/misc.R')
# Loading Mandingley reading functions
source('../main_code/network_reading.R')
source('../main_code/network_aggregation.R')
source('../main_code/network_sampling.R')
source('../main_code/network_functions.R')
source('../main_code/misc.R')
# Link attribute to be used as the weight in the network to perform the poisson sampling
simulation_attr_weight = "biomass.flow"
# Parameters for the degree distributions
simulation_S_degree             <- 200  # Number of aggregated cohorts
simulation_time_snapshot_degree <- 1223 # Time snapshot for degree distribution
simulation_tau_vals_degree      <- sapply(seq(1,9), function(x) 0.0000000001*10^x) # poisson parameter
# Parameters for the matrix visualizations
simulation_S_matrix             <- 60   # Number of aggregated cohorts
simulation_time_snapshot_matrix <- 1200 # Time snapshot
simulation_tau_vals_matrix      <- sapply(seq(1,6), function(x) 0.000000000001*100^x) # poisson parameter
node_file <- '../../data/madingley_data/original_nodes.txt'
edge_file <- '../../data/madingley_data/original_edges.txt'
# For this analysis, let's just focus in two snapshots
snapshot_times <- c(simulation_time_snapshot_degree,simulation_time_snapshot_matrix)
# Getting two madingley objects, one for each snapshot
madingley_full_objects <- lapply(snapshot_times,  read.madingley.data, file_nodes=node_file, file_edges=edge_file, include_source_node = FALSE)
S <- simulation_S_degree
# First snapshot corresponds to the one that will be used for degree distribution analysis
madingley_object <- madingley_full_objects[[1]]
kmeans_agg_graph_degree  <- cohort.aggregation(madingley_object, S, node.kmeans.aggregation)@G
jaccard_agg_graph_degree <- cohort.aggregation(madingley_object, S, node.jaccard.aggregation)@G
get_expected_degree_distribution <- function(tau, G, link_attr){
probability_matrix <- sampling.poisson.effort.prob_matrix(tau, G, link_attr)
expected_degrees   <- round(apply(probability_matrix, 1, sum) + apply(probability_matrix, 2, sum))
dt <- data.table(degree = expected_degrees)
dt <- dt[,.N,by=degree]
dt <- dt[order(-degree),]
dt$tau <- tau
return(data.table(degree=dt$degree, cdf=cumsum(dt$N)/sum(dt$N), tau=factor(tau)))
}
taus <- simulation_tau_vals_degree
# extracting the probabilities
dt_kmeans  <- rbindlist(lapply(taus, get_expected_degree_distribution, kmeans_agg_graph_degree, simulation_attr_weight))
dt_jaccard <- rbindlist(lapply(taus, get_expected_degree_distribution, jaccard_agg_graph_degree, simulation_attr_weight))
# One analysis without aggregation
dt_madingley <- rbindlist(lapply(taus, get_expected_degree_distribution,  madingley_full_objects[[1]]@G, simulation_attr_weight))
dt_kmeans$agg_method  <- 'Mass A/J K-means'
dt_jaccard$agg_method <- 'Jaccard Trophic Similarity'
dt_aggregation = rbind(dt_kmeans, dt_jaccard)
q <-qplot(data=dt_madingley, x=degree, y=cdf, log='y', size=I(2)) +
facet_wrap(~tau, scales = "free",  labeller = label_both) +
theme(axis.text=element_text(size=8),axis.title=element_text(size=12)) +
theme_bw()
pdf("sampling_degree_full_madingley.pdf", width = 8, height = 8) # Open a new pdf file
q
dev.off()
q
aggregated_kmeans
aggregated_kmeans @nodes
aggregated_kmeans @nodes$Fg
aggregated_kmeans @nodes$Fg
aggregated_kmeans@nodes$Fg
unique(aggregated_kmeans@nodes$Fg)
length(unique(aggregated_kmeans@nodes$Fg))
aggregated_kmeans@nodes
