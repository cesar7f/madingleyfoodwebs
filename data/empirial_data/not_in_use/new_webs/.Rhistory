pdf(file="dynamic_MPP.pdf", height=7, width=7)#
theta <- c(seq(0.25, 1, by=0.1), 1)#
m <- seq(1, 100, by=1)#
c1 <- seq(1, 10, by=1)#
lambda <- seq(0, 100, by=10)#
calc_p <- function(m, theta, c1=1, lambda=1, scale.fac=1) {#
return(scale.fac * (exp((theta - 2) / 3) * (m ** (3 * theta - 2)) * (theta - 2) * (theta - 2)) /#
(4 * c1 * (theta - 2) * (theta - 2) * (m ** (3 * theta - 2)) + lambda *#
(1 - theta) * (m ** theta) * exp((theta - 2) / 3)))#
}#
par(mfrow=c(3, 3))#
for (i in seq(along=theta)) {#
p <- calc_p(m=m, theta=theta[i], c1=1, lambda=lambda[1], scale.fac=1)#
plot(p ~ m, bty='l', las=1, ylim=c(0, 0.2), type='l', ylab="p(m)", col='black')#
for (j in seq(along=lambda)[2:length(lambda)]) {#
p <- calc_p(m=m, theta=theta[i], c1=1, lambda=lambda[j])#
lines(p ~ m, col=paste("gray", round(lambda[j] / 1.5)))#
}#
mtext(substitute(paste(theta, " = ", nn, sep=""), list(nn=theta[i])), side=3,#
line=0, adj=1, cex=0.8)#
}#
dev.off()
getwd()
install.packages("~/Downloads/nullfoodweb/R/nullfoodweb", repos = NULL)
install.packages("cheddar")
library(cheddar)
data(cheddar)
?cheddar
library(FREE)
FREE:::FREEdataSim
FREE:::FREEfree
?FREEfree
FREEdataSim <-#
function(n=100, n.vars=2, bins=NULL, y.mean=NULL, x.val=NULL, beta.mean=NULL, error.mean=0, error.sd=1, cov.mean=NULL, cov.sd=NULL){#
if (!is.null(x.val)) {#
if (n.vars != ncol(x.val)) {#
warning("x.val does not define n.vars variables: some variables set to default values.....", call.=FALSE)#
}#
}#
if (!is.null(beta.mean)) {#
if (ncol(matrix(beta.mean)) == 1) {#
beta.mean <- t(matrix(beta.mean))#
} else {#
beta.mean <- matrix(beta.mean)#
}#
}#
if (!is.null(beta.mean)) {#
if (n.vars != nrow(beta.mean)) {#
warning("beta.mean does not define n.vars variables: some beta set to default values.....", call.=FALSE)#
}#
}#
if (!is.null(beta.mean)) {#
if (nrow(beta.mean) > n.vars) {#
stop("beta.mean should have no more than n.vars rows.....", call.=FALSE)#
}#
}#
if (!is.null(x.val)) {#
if (is.null(n)) {#
n <- length(x.val)#
} else {#
if (length(x.val) != n){#
stop("x.val must be the same length as n.....", call.=FALSE)#
}#
}#
}#
if ({!is.null(cov.mean) & length(cov.mean) != n.vars} | #
{!is.null(cov.sd) & length(cov.sd) != n.vars}) {#
stop("cov.mean and cov.sd must have n.vars values.....", call.=FALSE)#
}#
if (!is.null(y.mean) & !is.null(beta.mean) & is.null(bins)) {#
if (length(y.mean) != length(beta.mean)) {#
stop("y.mean and beta.mean must have the same length.....", call.=FALSE)#
} else {#
bins <- length(y.mean)#
}#
}#
if (!is.null(y.mean) & is.null(beta.mean) & is.null(bins)) {#
bins <- 1:length(y.mean)#
}#
if (is.null(y.mean) & !is.null(beta.mean) & is.null(bins)) {#
bins <- 1:ncol(beta.mean)#
}#
if (!is.null(bins)) {#
if (!is.null(y.mean)) {#
if (length(y.mean) != length(bins)) {#
stop("y.mean and bins must specify the same length vector.....", call.=FALSE)#
}#
}#
if (!is.null(beta.mean)) {#
if (ncol(beta.mean) != length(bins)) {#
stop("beta.mean and bins must specify the same length vector.....", call.=FALSE)#
}#
}#
if (length(bins) == 1) {#
x <- seq(-10, 10, length=bins)#
} else {#
x <- bins#
}#
} else {#
x <- seq(-10, 10, by=1)#
}#
n.bins <- length(x)#
if (!is.null(y.mean)) {#
y.mean <- y.mean#
} else {#
y.mean <- sin(0.25 * x + 1.6)#
}#
y.noise.iid <- matrix(rnorm(length(x) * n, mean=error.mean, sd=error.sd), nrow=n)#
y.noise.ar1 <- matrix(unlist(lapply(1:n, function(x, n.sim=n.bins) arima.sim(list(ar=runif(1, 0.5, 0.85)), n=n.sim)[1:n.sim])), nrow=n, byrow=TRUE)#
y.noise.mvn <- mvrnorm(n=n, mu=rep(0, n.bins), Sigma=MakeCovMat(n=n.bins))#
y.noise.iid <- sweep(y.noise.iid, c(1, 2), apply(y.noise.iid, 1,#
function(x) max(abs(x))), "/")#
y.noise.ar1 <- sweep(y.noise.ar1, c(1, 2), apply(y.noise.ar1, 1,#
function(x) max(abs(x))), "/")#
y.noise.mvn <- sweep(y.noise.mvn, c(1, 2), apply(y.noise.mvn, 1,#
function(x) max(abs(x))), "/")#
cov.val <- matrix(NA, nrow=n, ncol=n.vars)#
if (is.null(cov.mean)) {#
cov.mean <- sample(1:10, size=n.vars, replace=TRUE)#
}#
if (is.null(cov.sd)) {#
cov.sd <- sample(c(0.5, 1, 1.5, 2), size=n.vars, replace=TRUE)#
}#
if (!is.null(x.val)) {#
x.val <- matrix(x.val)#
if (ncol(x.val) > 1) {#
for (i in 1:ncol(x.val)) {#
cov.val[, i] <- x.val[, i]#
}#
} else {#
cov.val[, 1] <- x.val#
}#
if (ncol(x.val) != n.vars) {#
n.cov.missing <- n.vars - ncol(x.val)#
for (i in 1:n.cov.missing) {#
cov.val[, {ncol(x.val) + i}] <- rnorm(n, mean=cov.mean[i], sd=cov.sd[i])#
}#
}#
} else {#
for (i in 1:n.vars) {#
cov.val[, i] <- rnorm(n, mean=cov.mean[i], sd=cov.sd[i])#
}#
}#
cov.val <- apply(cov.val, 2, function(x) x / max(x))#
y.cov <- matrix(NA, ncol=length(x), nrow=n.vars)#
if (!is.null(beta.mean)) {#
for (i in 1:nrow(beta.mean)) {#
y.cov[i, ] <- beta.mean[i, ]#
}#
if (nrow(beta.mean) != n.vars) {#
n.beta.missing <- n.vars - nrow(beta.mean)#
for (i in 1:n.beta.missing) {#
y.cov[{nrow(beta.mean) + i}, ] <- runif(1, 0.1, 2) * sin(runif(1, 0.1, 1) * x + i * {pi / 3})#
}#
}#
} else {#
for (i in 1:n.vars) {#
y.cov[i, ] <- runif(1, 0.1, 2) * sin(runif(1, 0.1, 1) * x + i * {pi / 3})#
}#
}#
y.obs.iid <- sweep(y.noise.iid, 2, y.mean, "+")#
y.obs.ar1 <- sweep(y.noise.ar1, 2, y.mean, "+")#
y.obs.mvn <- sweep(y.noise.mvn, 2, y.mean, "+")#
y.beta <- cov.val %*% y.cov#
y.obs.iid <- y.obs.iid + y.beta#
y.obs.ar1 <- y.obs.ar1 + y.beta#
y.obs.mvn <- y.obs.mvn + y.beta#
cov.val <- data.frame(cov.val)#
for (i in 1:ncol(cov.val)) {#
colnames(cov.val)[i] <- paste("VAR", i, sep="")#
}#
return(list(y.iid=y.obs.iid, y.ar1=y.obs.ar1, y.mvn=y.obs.mvn, x=cov.val, mean.real=y.mean, beta.real=y.cov, error.iid=y.noise.iid, error.ar1=y.noise.ar1, error.mvn=y.noise.mvn, bins=x))#
}
FREEdataSim()
library(mvrnorm)
library(MASS)
FREEdataSim()
MakeCovMat <-#
function(n=10){#
decay <- exp(c(-1:-n)/3)#
CovMat <- matrix(0, nrow=n, ncol=n)#
for (i in 1:{nrow(CovMat) - 1}) {#
CovMat[row(CovMat) == i][{i + 1}:nrow(CovMat)] <- decay[1:{length(decay) - i}]#
}#
diag(CovMat) <- 1#
CovMat[lower.tri(CovMat)] <- t(CovMat)[lower.tri(CovMat)]#
CovMat#
}
FREEdataSim()
data <- FREEdataSim()
names(data)
plot(data$y.ar1 ~ data$x)
dim(data$y.ar1)
plot(data$y.ar1 ~ rep(data$x, 21))
dim(data$x)
head(data$x)
plot(data$y.ar1 ~ rep(data$x$VAR1, 21))
plot(data$y.ar1 ~ data$x$VAR1)
plot(data$y.ar1[, 1] ~ data$x$VAR1)
plot(data$y.ar1[, 2] ~ data$x$VAR1)
plot(data$y.ar1[, 15] ~ data$x$VAR1)
head(data$y.iid)
head(data$y.ar1)
plot(data$y.ar1[1,])
plot(data$y.ar1[2,])
plot(data$y.ar1[3,])
a
a <- matrix(rep(1, 100), ncol=10)
a
sweep(a, c(1, 2), c(1:10), "+")
?save
library(FREE)
data <- FREEdataSim(function.class="predictor")
data <- FREEdataSim(function.class="predictor", n.vars=1)
class(data$x)
dim(data$x)
data.list <- list(y=data$y.iid, VAR=data$x[,,1])
mod <- FREEfit(y ~ VAR, data=data.list)
predict(mod)
predict(mod, newdata=data.list$VAR)
coef(mod)$mean
class(mod)
mod
mod$method
coef(mod)$mean
data.list$VAR
dim(data.list$VAR)
coef(mod)$mean
names(mod)
dim(mod)$coefs.mean
dim(mod$coefs.mean
)
length(fitted(mod))
names(mod)
ncol(mod$coefs.mean)
coef(mod$mean)
coef(mod)$mean
coef(mod)$mean[1, ]
library(FREE)
data <- FREEdataSim(function.class="predictor")
data.list <- list(y=data$y.iid, VAR1=data$x[,,1], VAR2=data$x[[,2]])
data.list <- list(y=data$y.iid, VAR1=data$x[,,1], VAR2=data$x[,,2])
model <- FREEfit(y ~ VAR1 + VAR2, data=data.list)
model$method
plot(model)
mdoel
model
modelCV <- FREEfitCV(y ~ VAR1 + VAR2, data=data.list, n.cv=5)
traceback()
predict.FREEfit.test <-#
function(object, newdata=NULL, ...){#
if (is.null(newdata)) {#
y <- fitted(object)#
} else {#
if (!is.null(object$formula) & !is.matrix(newdata)){#
if (is.null(newdata$`all.vars(object$formula)[1]`)) {#
newdata[[length(newdata) + 1]] <- rnorm(length(newdata[[1]]))#
names(newdata)[length(newdata)] <- all.vars(object$formula)[1]#
}#
x <- model.matrix(object$formula, newdata)#
} else {#
if (is.matrix(newdata)) {#
x <- cbind(rep(1, nrow(newdata)), newdata)#
} else {#
if (is.vector(newdata)) {#
x <- cbind(rep(1, length(newdata)), newdata)#
} else {#
stop("newdata in predict.FREEfit are not vector or matrix...", call.=FALSE)#
}#
}#
}#
if (object$method == "scalar") {#
y <- rep(object$intercept.mean, length(fitted(object)))#
for (j in 1:nrow(object$coefs.mean)) {#
y <- y + newdata[, ((j - 1) * ncol(object$coefs.mean) + 1):#
(j * ncol(object$coefs.mean))] %*% coef(object)$mean[j, ]#
}#
} else {#
y <- x %*% coef(object)$mean#
}#
}#
y#
}
predict.FREEfit.test(model, newdata=cbind(data.list$VAR1, data.list$VAR2))
predict.FREEfit.test(model, newdata=cbind(data.list$VAR1, data.list$VAR2)) == fitted(model)
round(predict.FREEfit.test(model, newdata=cbind(data.list$VAR1, data.list$VAR2)),2) == round(fitted(model),2)
plot(predict.FREEfit.test(model, newdata=cbind(data.list$VAR1, data.list$VAR2))~fitted(model))
predict.FREEfit.test <-#
function(object, newdata=NULL, ...){#
if (is.null(newdata)) {#
y <- fitted(object)#
} else {#
if (object$method != "scalar") {#
if (!is.null(object$formula) & !is.matrix(newdata)){#
if (is.null(newdata$`all.vars(object$formula)[1]`)) {#
newdata[[length(newdata) + 1]] <- rnorm(length(newdata[[1]]))#
names(newdata)[length(newdata)] <- all.vars(object$formula)[1]#
}#
x <- model.matrix(object$formula, newdata)#
} else {#
if (is.matrix(newdata)) {#
x <- cbind(rep(1, nrow(newdata)), newdata)#
} else {#
if (is.vector(newdata)) {#
x <- cbind(rep(1, length(newdata)), newdata)#
} else {#
stop("newdata in predict.FREEfit are not vector or matrix...", call.=FALSE)#
}#
}#
}#
y <- x %*% coef(object)$mean#
} else {#
if (object$method == "scalar") {#
y <- rep(object$intercept.mean, length(fitted(object)))#
for (j in 1:nrow(object$coefs.mean)) {#
y <- y + newdata[, ((j - 1) * ncol(object$coefs.mean) + 1):#
(j * ncol(object$coefs.mean))] %*% coef(object)$mean[j, ]#
}#
}#
}#
}#
y#
}
plot(predict.FREEfit.test(model, newdata=cbind(data.list$VAR1, data.list$VAR2))~fitted(model))
plot(predict.FREEfit.test(model, newdata=cbind(data.list$VAR1))~fitted(model))
plot(predict.FREEfit.test(model, newdata=cbind(data.list$VAR1, data.list$VAR2))~fitted(model))
library(FREE)
data <- FREEdataSim(function.class="predictor")
data.list <- list(y=data$y.iid, VAR1=data$x[,,1], VAR2=data$x[,,2])
mod <- FREEfit(y ~ VAR1 + VAR2, data=data.list, method="FREE")
plot(mod)
mod
apply(coef(mod)$mean, 1, sum)
coef(mod)$mean
sum(coef(mod)$mean[1, 2:21])
plot(mod)
dynamic ISD model - based on max(P) and the eps(m, p(m)) derived in the static ISD ms#
#
rm(list=ls())#
#
# define p(m, t) function#
pmt_calc <- function(m=seq(1, 100, length=1000), c1=1, c2=1, theta1=0.75, theta2=(theta1 - 1),#
                     lambda1=-1, lambda2=1, lambda3=1, g_m=(c1 * (m ** theta1)),#
                     d_m=c(c2 * (m ** theta2)), dg_dm=(theta1 * c1 * (m ** (theta1 - 1))),#
                     plus_minus=1) {#
  p_m_t <- (lambda1 * (- dg_dm + (2 * d_m)) + (plus_minus) * #
           sqrt(lambda1 * lambda1 * (- dg_dm + 2 * d_m) * (dg_dm - 2 * d_m) -#
                4 * lambda1 * (lambda2 * m * d_m * d_m + lambda2 * g_m * d_m +#
                lambda3 * m * d_m))) /#
           (2 * (lambda2 * m * d_m + lambda2 * g_m + lambda3 * m))#
  return(list(p=p_m_t, m=m))#
}#
#
# set up a range of thetas to cycle through#
theta1.vec <- seq(0, 2, length=10)#
theta2.vec <- seq(-1, 1, length=10)#
#
# changing theta1#
pm.temp <- pmt_calc(theta1=0.75, theta2=-0.25)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.001, 1), log="xy")#
for (i in seq(along=theta1.vec)) {#
  pm.temp <- pmt_calc(theta1=theta1.vec[i], theta2=-0.25)#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}#
#
# changing theta2#
pm.temp <- pmt_calc(theta1=0.75, theta2=-0.25)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.005, 1), log="xy")#
for (i in seq(along=theta2.vec)) {#
  pm.temp <- pmt_calc(theta1=0.75, theta2=theta2.vec[i])#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}#
#
# changing theta1 with theta2=(theta1 - 1)#
pm.temp <- pmt_calc(theta1=0.75)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.001, 1), log="xy")#
for (i in seq(along=theta1.vec)) {#
  pm.temp <- pmt_calc(theta1=theta1.vec[i])#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}#
#
# set up a range of c1 and c2 to cycle through#
c1.vec <- seq(0, 10, length=11)#
c2.vec <- seq(0, 10, length=11)#
#
# changing c1#
pm.temp <- pmt_calc(c1=1)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.02, 2), log="xy")#
for (i in seq(along=c1.vec)) {#
  pm.temp <- pmt_calc(c1=c1.vec[i])#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}#
#
# changing c2#
pm.temp <- pmt_calc(c2=1)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.02, 2), log="xy")#
for (i in seq(along=c2.vec)) {#
  pm.temp <- pmt_calc(c2=c2.vec[i])#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}
changing c1#
pm.temp <- pmt_calc(c1=1)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.02, 2), log="xy")#
for (i in seq(along=c1.vec)) {#
  pm.temp <- pmt_calc(c1=c1.vec[i])#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}
changing theta1 with theta2=(theta1 - 1)#
pm.temp <- pmt_calc(theta1=0.75)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.001, 1), log="xy")#
for (i in seq(along=theta1.vec)) {#
  pm.temp <- pmt_calc(theta1=theta1.vec[i])#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}
changing theta2#
pm.temp <- pmt_calc(theta1=0.75, theta2=-0.25)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.005, 1), log="xy")#
for (i in seq(along=theta2.vec)) {#
  pm.temp <- pmt_calc(theta1=0.75, theta2=theta2.vec[i])#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}
changing theta1#
pm.temp <- pmt_calc(theta1=0.75, theta2=-0.25)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.001, 1), log="xy")#
for (i in seq(along=theta1.vec)) {#
  pm.temp <- pmt_calc(theta1=theta1.vec[i], theta2=-0.25)#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}
pm.temp <- pmt_calc(theta1=0.75, theta2=-0.25)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.001, 1), log="xy")
pm.temp <- pmt_calc(theta1=0.75, theta2=-0.25)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.001, 1), log="")
for (i in seq(along=theta1.vec)) {#
  pm.temp <- pmt_calc(theta1=theta1.vec[i], theta2=-0.25)#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}
pm.temp <- pmt_calc(theta1=0.75, theta2=-0.25)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.001, 1), log="xy")
pm.temp <- pmt_calc(theta1=0.75, theta2=-0.25)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.001, 1), log="")
for (i in seq(along=theta1.vec)) {#
  pm.temp <- pmt_calc(theta1=theta1.vec[i], theta2=-0.25)#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}
pm.temp <- pmt_calc(theta1=0.75, theta2=-0.25)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.005, 1), log="xy")
for (i in seq(along=theta2.vec)) {#
  pm.temp <- pmt_calc(theta1=0.75, theta2=theta2.vec[i])#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}
pm.temp <- pmt_calc(theta1=0.75, theta2=-0.25)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.005, 1), log="")
for (i in seq(along=theta2.vec)) {#
  pm.temp <- pmt_calc(theta1=0.75, theta2=theta2.vec[i])#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}
pm.temp <- pmt_calc(theta1=0.75, theta2=-0.25)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.005, 1), log="")
for (i in seq(along=theta2.vec)) {#
  pm.temp <- pmt_calc(theta1=0.75, theta2=theta2.vec[i])#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}
pm.temp <- pmt_calc(theta1=0.75, theta2=-0.25)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.005, 1), log="")
for (i in seq(along=theta2.vec)) {#
  pm.temp <- pmt_calc(theta1=0.75, theta2=theta2.vec[i])#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}
pm.temp <- pmt_calc(theta1=0.75, theta2=-0.25)#
plot(pm.temp$p ~ pm.temp$m, type='l', ylim=c(0.005, 1), log="xy")
for (i in seq(along=theta2.vec)) {#
  pm.temp <- pmt_calc(theta1=0.75, theta2=theta2.vec[i])#
  lines(pm.temp$p ~ pm.temp$m, col=i)#
}
install.packages("igraph")
install.packages("netindices")
install.packages("NetIndices")
install.packages("tnet")
install.packages("sna")
?NetIndices
library(NetIndices)
?NetIndices
?TrophInd
?igraph
?TrophInd
clustering_w
?clustering_w
library(sna)
library(tnet)
?clustering_w
?gtrans
A <- matrix(rbinom(100, size=1, prob=0.3), nrow=10)
A
dim(A)
class(A)
if ((sum(A == 0) + sum(A == 1)) != length(A)) {#
      fw <- ifelse(A > 0, 1, 0)#
    } else {#
      fw <- A#
    }
A
A.graph <- graph.adjacency(A, mode="directed", diag=FALSE)
A.graph
class(A.graph)
dim(A)
sum(A != 0)
summary(A)
summary(A.graphj)
summary(A.graph)
print(A.graph)
names(A.graph)
class(A.graph)
A.graph@names
diag(fw) <- 0#
    S <- ncol(fw)#
    L <- sum(fw)
S
L
fw
A
connectance#
    connect <- L / (S * S)#
    # no. basal#
    basal <- sum(apply(fw, 2, sum, na.rm=TRUE) == 0, na.rm=TRUE)#
    # no. int.#
    int <- sum(apply(fw, 1, sum, na.rm=TRUE) != 0 & apply(fw, 2, sum, na.rm=TRUE) != 0)#
    # no. top#
    top <- sum(apply(fw, 1, sum, na.rm=TRUE) == 0, na.rm=TRUE)#
    # generality#
    gen <- L / (top + int)#
    # vulnerability#
    vul <- L / (basal + int)#
    # standard deviation of generality#
    genk <- (S / L) * apply(fw, 2, sum, na.rm=TRUE)#
    sdGen <- sd(genk, na.rm=TRUE)#
    # standard deviation of vulnerability#
    vulk <- (S / L) * apply(fw, 1, sum, na.rm=TRUE)#
    sdVul <- sd(vulk, na.rm=TRUE)#
    # mean path length
sdVul
sdGen
vul
gen
top
int
basal
connect
mean.pl <- average.path.length(A.graph)
mean.pl
mean.tl <- mean(TrophInd(fw)$TL, na.rm=TRUE)
mean.tl
TrophInd(A)
TrophInd(fw)
mean.oi <- mean(TrophInd(fw)$OI, na.rm=TRUE)
mean.oi
names(TrophInd(A))
names(TrophInd(fw))
fg.mod <- modularity(fastgreedy.community(A.graph))
sg.mod <- modularity(spinglass.community(A.graph))
sg.mod
spinglass.community(A.graph)
fastgreedy.community(graph.adjacency(A, mode="undirected", diag=F))
modularity(fastgreedy.community(graph.adjacency(A, mode="undirected", diag=F))
)
fg.mod <- modularity(fastgreedy.community(A.graph2))
A.graph2 <- graph.adjacency(A, mode="undirected", diag=FALSE)
fg.mod <- modularity(fastgreedy.community(A.graph2))
sg.mod <- modularity(spinglass.community(A.graph))
fg.mod
sg.mod
le.mod <- modularity(leading.eigenvector.community(A.graph))
le.mod
le.mod <- modularity(leading.eigenvector.community(A.graph2))
le.mod
rw.mod <- modularity(walktrap.community(A.graph))
rw.mod
clust <- clustering_w(fw, measure="bi")
clust
clust[1]
trans <- gtrans(fw, mode="digraph")
trans
int <- sum((apply(fw, 1, sum, na.rm=TRUE) != 0) &#
               (apply(fw, 2, sum, na.rm=TRUE) != 0))
int
setwd("~/Dropbox/fwga/new_webs")
list.files()
data <- vector("list", length=3)
for(i in seq(along=list.files())) { data[[i]] <- read.csv(list.files()[i])}
data
dim(data)
length(data)
sapply(data, dim)
list.files()
head(data[[1]])
data[[1]][, 1]
sapply(data, dim)
for(i in seq(along=list.files())) { data[[i]] <- read.csv(list.files()[i], row.names=1)}
sapply(data, dim)
list.files()
sapply(data, function(x) sum(x) / (ncol(x) * ncol(x)))
sum(data[[1]])
83**2
496/6889
data
?save
ls()
getwd()
length(data)
save(a, file="aqua_webs.rda")
save(data, file="aqua_webs.rda")
aqua.webs <- data
save(aqua.webs, file="aqua_webs.rda")
str(aqua.webs)
str(aqua.webs[[1]])
class(aqua.webs)
class(aqua.webs[[1]])
class(aqua.webs[[2]])
class(aqua.webs[[3]])
for(i in seq(along=list.files())) { data[[i]] <- as.matrix(read.csv(list.files()[i], row.names=1))}
aqua.webs <- data
save(aqua.webs, file="aqua_webs.rda")
aqua.webs[[1]]
str(aqua.webs)
head(aqua.webs[[1]])
head(aqua.webs[[2]])
head(aqua.webs[[3]])
class(aqua.webs[[1]])
class(aqua.webs[[2]])
class(aqua.webs[[3]])
sapply(aqua.webs, di)
sapply(aqua.webs, dim)
